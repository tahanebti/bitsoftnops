name: User-service Maven CI/CD
'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
  DOCKER_PASSWORD: '${{ secrets.DOCKER_PASSWORD }}'
  DOCKER_REPO: '${{ secrets.DOCKER_USERNAME }}/bitsoftnops-user-service'
jobs:
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server        
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2      

    - name: Build and test project with Maven
      run: mvn -B package --file pom.xml

    
  publish-job:
      runs-on: ubuntu-latest
      needs: [build_and_test]
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Set up JDK 1.8
          uses: actions/setup-java@v1
          with:
            java-version: 1.8
        - name: Build and package without tests
          run: mvn -B package --file pom.xml -DskipTests
        - name: Create staging directory and copy package
          run: mkdir staging && cp services/user-service/target/user-service-1.0.0.jar staging
        - name: Publish artifact to GitHub
          uses: actions/upload-artifact@v1
          with:
            name: Package
            path: staging
            
  build-docker-image:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs:
      - build_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set Context
        working-directory: server/services/user-service
      - name: Login to Docker Hub
        run: docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
      - name: Build Container image
        run: 'docker build -t ${{ env.DOCKER_REPO }}:latest .'
      - name: Publish Docker image
        run: 'docker push ${{ env.DOCKER_REPO }'
